#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/select.h>
#include <netinet/in.h>

#define PORT 25020
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

typedef struct {
    int socket;
    int id;
    struct sockaddr_in addr;
} Client;

int main() {
    int server_fd, max_sd, activity, i, valread, new_socket;
    struct sockaddr_in server_addr, client_addr;
    int addr_len = sizeof(client_addr);
    fd_set readfds;
    char buffer[BUFFER_SIZE];
    Client clients[MAX_CLIENTS] = {0};

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket creation failed");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(1);
    }

    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("Listen failed");
        close(server_fd);
        exit(1);
    }

    printf("Chat Server started on port %d...\n", PORT);

    while (1) {
        FD_ZERO(&readfds);
        FD_SET(server_fd, &readfds);
        FD_SET(STDIN_FILENO, &readfds);
        max_sd = server_fd;

        for (i = 0; i < MAX_CLIENTS; i++) {
            if (clients[i].socket > 0) {
                FD_SET(clients[i].socket, &readfds);
                if (clients[i].socket > max_sd) max_sd = clients[i].socket;
            }
        }

        activity = select(max_sd + 1, &readfds, NULL, NULL, NULL);

        if (FD_ISSET(server_fd, &readfds)) {
            if ((new_socket = accept(server_fd, (struct sockaddr*)&client_addr, (socklen_t*)&addr_len)) < 0) {
                perror("Accept failed");
                exit(1);
            }

            for (i = 0; i < MAX_CLIENTS; i++) {
                if (clients[i].socket == 0) {
                    clients[i].socket = new_socket;
                    clients[i].id = i + 1;
                    clients[i].addr = client_addr;
                    printf("Client %d connected\n", clients[i].id);
                    sprintf(buffer, "Welcome! Your Client ID is %d\n", clients[i].id);
                    send(new_socket, buffer, strlen(buffer), 0);
                    break;
                }
            }
        }

        for (i = 0; i < MAX_CLIENTS; i++) {
            if (clients[i].socket > 0 && FD_ISSET(clients[i].socket, &readfds)) {
                valread = read(clients[i].socket, buffer, BUFFER_SIZE);
                if (valread <= 0) {
                    printf("Client %d disconnected\n", clients[i].id);
                    close(clients[i].socket);
                    clients[i].socket = 0;
                } else {
                    buffer[valread] = '\0';
                    printf("Client %d: %s\n", clients[i].id, buffer);

                    if (strncmp(buffer, "@", 1) == 0) {
                        int target_id;
                        char msg[BUFFER_SIZE];
                        sscanf(buffer, "@%d %[^\n]", &target_id, msg);

                        for (int j = 0; j < MAX_CLIENTS; j++) {
                            if (clients[j].id == target_id) {
                                send(clients[j].socket, msg, strlen(msg), 0);
                                break;
                            }
                        }
                    } else {
                        for (int j = 0; j < MAX_CLIENTS; j++) {
                            if (clients[j].socket > 0 && clients[j].socket != clients[i].socket) {
                                send(clients[j].socket, buffer, strlen(buffer), 0);
                            }
                        }
                    }
                }
            }
        }
    }
}




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <pthread.h>

#define PORT 25020
#define BUFFER_SIZE 1024

int sockfd;
char buffer[BUFFER_SIZE];

void *receive_messages(void *arg) {
    while (1) {
        int valread = read(sockfd, buffer, BUFFER_SIZE);
        if (valread > 0) {
            buffer[valread] = '\0';
            printf("\n%s\n", buffer);
        }
    }
    return NULL;
}

int main() {
    struct sockaddr_in server_addr;
    pthread_t recv_thread;

    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);

    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        exit(1);
    }

    printf("Connected to chat server! Use '@client_id message' to send private messages.\n");

    pthread_create(&recv_thread, NULL, receive_messages, NULL);

    while (1) {
        fgets(buffer, BUFFER_SIZE, stdin);
        send(sockfd, buffer, strlen(buffer), 0);
    }

    close(sockfd);
    return 0;
}





// single user 
// server 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/select.h>
#include <netinet/in.h>

#define PORT 25020
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

int main() {
    int server_fd, client_fd, max_sd, sd, activity, i, valread;
    struct sockaddr_in server_addr, client_addr;
    int addr_len = sizeof(client_addr);
    fd_set readfds;
    char buffer[BUFFER_SIZE];
    int client_sockets[MAX_CLIENTS] = {0};

    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Server socket failed");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_fd);
        exit(1);
    }

    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("Listen failed");
        close(server_fd);
        exit(1);
    }

    printf("Chat Server started on port %d...\n", PORT);

    while (1) {
        FD_ZERO(&readfds);
        FD_SET(server_fd, &readfds);
        FD_SET(STDIN_FILENO, &readfds);
        max_sd = server_fd;

        for (i = 0; i < MAX_CLIENTS; i++) {
            sd = client_sockets[i];
            if (sd > 0) FD_SET(sd, &readfds);
            if (sd > max_sd) max_sd = sd;
        }

        activity = select(max_sd + 1, &readfds, NULL, NULL, NULL);
        if ((activity < 0) && (errno != EINTR)) {
            perror("Select error");
        }

        if (FD_ISSET(server_fd, &readfds)) {
            if ((client_fd = accept(server_fd, (struct sockaddr*)&client_addr, (socklen_t*)&addr_len)) < 0) {
                perror("Accept failed");
                exit(1);
            }

            printf("New client connected: %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

            for (i = 0; i < MAX_CLIENTS; i++) {
                if (client_sockets[i] == 0) {
                    client_sockets[i] = client_fd;
                    break;
                }
            }
        }

        if (FD_ISSET(STDIN_FILENO, &readfds)) {
            fgets(buffer, BUFFER_SIZE, stdin);
            buffer[strcspn(buffer, "\n")] = 0;
            if (strncmp(buffer, "kick", 4) == 0) {
                int client_num = atoi(&buffer[5]) - 1;
                if (client_num >= 0 && client_num < MAX_CLIENTS && client_sockets[client_num] > 0) {
                    printf("Disconnecting client %d...\n", client_num + 1);
                    close(client_sockets[client_num]);
                    client_sockets[client_num] = 0;
                } else {
                    printf("Invalid client number.\n");
                }
            }
        }

        for (i = 0; i < MAX_CLIENTS; i++) {
            sd = client_sockets[i];

            if (FD_ISSET(sd, &readfds)) {
                if ((valread = read(sd, buffer, BUFFER_SIZE)) == 0) {
                    getpeername(sd, (struct sockaddr*)&client_addr, (socklen_t*)&addr_len);
                    printf("Client disconnected: %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
                    close(sd);
                    client_sockets[i] = 0;
                } else {
                    buffer[valread] = '\0';
                    printf("Client %d: %s\n", i + 1, buffer);
                    send(sd, buffer, strlen(buffer), 0);
                }
            }
        }
    }

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 25020
#define BUFFER_SIZE 1024

int main() {
    int sock;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];
    fd_set readfds;

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);

    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        exit(1);
    }

    printf("Connected to chat server. Type messages and press enter to send.\n");

    while (1) {
        FD_ZERO(&readfds);
        FD_SET(STDIN_FILENO, &readfds);
        FD_SET(sock, &readfds);

        if (select(sock + 1, &readfds, NULL, NULL, NULL) < 0) {
            perror("Select error");
            exit(1);
        }

        if (FD_ISSET(STDIN_FILENO, &readfds)) {
            fgets(buffer, BUFFER_SIZE, stdin);
            buffer[strcspn(buffer, "\n")] = 0;
            send(sock, buffer, strlen(buffer), 0);
        }

        if (FD_ISSET(sock, &readfds)) {
            int valread = read(sock, buffer, BUFFER_SIZE);
            if (valread == 0) {
                printf("Disconnected from server.\n");
                close(sock);
                exit(0);
            }
            buffer[valread] = '\0';
            printf("Server: %s\n", buffer);
        }
    }

    return 0;
}




//time server 
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

struct sockaddr_in serv_addr;
int skfd, r, w;
unsigned short serv_port = 25020;
char serv_ip[] = "127.0.0.1";
char rbuff[128];
char sbuff[128] = "Hello Time Server";

int main() {
    bzero(&serv_addr, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    printf("\nTCP TIME CLIENT.\n");

    if ((skfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("CLIENT ERROR: Cannot create socket");
        exit(1);
    }

    if ((connect(skfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0) {
        perror("CLIENT ERROR: Cannot connect to the server");
        close(skfd);
        exit(1);
    }

    printf("\nCLIENT: Connected to the server.\n");

    if ((w = write(skfd, sbuff, strlen(sbuff))) < 0) {
        perror("CLIENT ERROR: Cannot send message");
        close(skfd);
        exit(1);
    }

    printf("\nCLIENT: Message sent to the time server.\n");

    if ((r = read(skfd, rbuff, 128)) > 0) {
        rbuff[r] = '\0';
        printf("\nCLIENT: Time from server: %s\n", rbuff);
    } else {
        perror("CLIENT ERROR: Cannot receive message");
    }

    close(skfd);
    return 0;
}



#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

struct sockaddr_in serv_addr, cli_addr;
int listenfd, connfd, r, cli_addr_len;
unsigned short serv_port = 25020;
char serv_ip[] = "127.0.0.1";
char buff[128];

int main() {
    bzero(&serv_addr, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(serv_port);
    inet_aton(serv_ip, &serv_addr.sin_addr);

    printf("\nTCP TIME SERVER.\n");

    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("SERVER ERROR: Cannot create socket");
        exit(1);
    }

    if (bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("SERVER ERROR: Cannot bind");
        close(listenfd);
        exit(1);
    }

    if (listen(listenfd, 5) < 0) {
        perror("SERVER ERROR: Cannot listen");
        close(listenfd);
        exit(1);
    }

    cli_addr_len = sizeof(cli_addr);
    
    for (;;) {
        printf("\nSERVER: Listening for clients... Press Ctrl + C to stop the server.\n");

        if ((connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &cli_addr_len)) < 0) {
            perror("SERVER ERROR: Cannot accept client connection");
            close(listenfd);
            exit(1);
        }

        printf("\nSERVER: Connection accepted from %s.\n", inet_ntoa(cli_addr.sin_addr));

        if ((r = read(connfd, buff, 128)) > 0) {
            buff[r] = '\0';
            printf("\nSERVER: Received message: %s\n", buff);

            time_t t;
            time(&t);
            snprintf(buff, 128, "Welcome to the Time Server! Current time: %s", ctime(&t));

            if (write(connfd, buff, strlen(buff)) < 0)
                perror("SERVER ERROR: Cannot send message");
            else
                printf("\nSERVER: Sent current time to %s.\n", inet_ntoa(cli_addr.sin_addr));
        } else {
            perror("SERVER ERROR: Cannot receive message from client");
        }

        close(connfd);
    }

    return 0;
}


