#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

const int NUM_ITEMS = 10000;
const int NUM_WORKERS = 10;

double get_assembly_time() {
    return 100.0 + (rand() / (double)RAND_MAX) * 200.0;
}

double get_polishing_time() {
    double u1, u2, z;
    do {
        u1 = rand() / (double)RAND_MAX;
        u2 = rand() / (double)RAND_MAX;
        z = sqrt(-2.0 * log(u1)) * cos(2 * M_PI * u2);
        z = 20.0 + 7.0 * z;
    } while (z < 5.0);
    return z;
}

int find_next_available_machine(double* machine_ready_times, int num_machines) {
    int idx = 0;
    for (int i = 1; i < num_machines; ++i) {
        if (machine_ready_times[i] < machine_ready_times[idx]) {
            idx = i;
        }
    }
    return idx;
}

double simulate(int num_machines) {
    double worker_time[NUM_WORKERS] = {0};
    double machine_ready[10] = {0};

    for (int i = 0; i < num_machines; ++i) {
        machine_ready[i] = 0;
    }

    double total_wait_time = 0.0;

    for (int i = 0; i < NUM_ITEMS; ++i) {
        int worker_id = i % NUM_WORKERS;

        double assembly_time = get_assembly_time();
        double assembly_done = worker_time[worker_id] + assembly_time;

        int machine_id = find_next_available_machine(machine_ready, num_machines);
        double wait_time = (machine_ready[machine_id] > assembly_done) ? (machine_ready[machine_id] - assembly_done) : 0.0;
        double polishing_start = assembly_done + wait_time;
        double polishing_time = get_polishing_time();
        double polishing_done = polishing_start + polishing_time;

        machine_ready[machine_id] = polishing_done;
        worker_time[worker_id] = polishing_done;

        total_wait_time += wait_time;
    }

    return total_wait_time / NUM_ITEMS;
}

int main() {
    srand(time(0));

    cout << "Average wait time with 1 polishing machine: " << simulate(1) << " seconds" << endl;
    cout << "Average wait time with 2 polishing machines: " << simulate(2) << " seconds" << endl;
    cout << "Average wait time with 3 polishing machines: " << simulate(3) << " seconds" << endl;

    return 0;
}
