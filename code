#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

void bellmanFord(int **edges, int edgeCount, int vertexCount, int **table, int *parent, int src) {
    // Initialize distance table
    for (int i = 1; i <= vertexCount; i++) 
        table[1][i] = (i == src) ? 0 : INT_MAX;

    // Relax edges (vertexCount - 1) times
    for (int k = 2; k <= vertexCount; k++) {
        for (int i = 1; i <= vertexCount; i++) 
            table[k][i] = table[k - 1][i];

        for (int i = 0; i < edgeCount; i++) {
            int u = edges[i][0], v = edges[i][1], weight = edges[i][2];

            if (table[k - 1][u] != INT_MAX && table[k - 1][u] + weight < table[k][v]) {
                table[k][v] = table[k - 1][u] + weight;
                parent[v] = u;
            }
        }
    }
}

void printPath(int *parent, int node) {
    if (parent[node] == -1) return;
    printPath(parent, parent[node]);
    printf("->%d", node);
}

int main() {
    int vertexCount, edgeCount, src;

    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &vertexCount, &edgeCount);

    // Dynamic allocation for edges array
    int **edges = (int **)malloc(edgeCount * sizeof(int *));
    for (int i = 0; i < edgeCount; i++) {
        edges[i] = (int *)malloc(3 * sizeof(int));
    }

    // Dynamic allocation for parent array
    int *parent = (int *)malloc((vertexCount + 1) * sizeof(int));

    // Dynamic allocation for table
    int **table = (int **)malloc((vertexCount + 1) * sizeof(int *));
    for (int i = 0; i <= vertexCount; i++) {
        table[i] = (int *)malloc((vertexCount + 1) * sizeof(int));
    }

    // Initialize parent array
    for (int i = 1; i <= vertexCount; i++) 
        parent[i] = -1;

    printf("Enter edges (format: source destination weight):\n");
    for (int i = 0; i < edgeCount; i++) 
        scanf("%d %d %d", &edges[i][0], &edges[i][1], &edges[i][2]);

    printf("Enter source vertex: ");
    scanf("%d", &src);

    bellmanFord(edges, edgeCount, vertexCount, table, parent, src);

    // Print table headers
    printf("\n   ");
    for (int i = 1; i <= vertexCount; i++) 
        printf("%d->%d ", src, i);
    printf("\n");

    // Print distance table
    for (int i = 2; i <= vertexCount; i++) {
        printf("%d  ", i - 1);
        for (int j = 1; j <= vertexCount; j++) {
            if (table[i][j] == INT_MAX) 
                printf(" I   ");
            else 
                printf(" %d   ", table[i][j]);
        }
        printf("\n");
    }

    // Print shortest paths from source to all other vertices
    for (int i = 1; i <= vertexCount; i++) {
        if (i == src) continue;
        printf("%d", src);
        printPath(parent, i);
        printf(": %d\n", table[vertexCount][i]);
    }

    // Free allocated memory
    for (int i = 0; i < edgeCount; i++)
        free(edges[i]);
    free(edges);

    for (int i = 0; i <= vertexCount; i++)
        free(table[i]);
    free(table);

    free(parent);

    return 0;
}
