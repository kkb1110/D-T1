#include <iostream>

using namespace std;

#define MAX_USERS 100
#define MAX_TRANSACTIONS 100

// User class
class User {
public:
    int userID;
    int startTime;
    int numTransactions;
    int transactions[MAX_TRANSACTIONS];

    // Constructor to initialize a User
    User() {
        userID = 0;
        startTime = 0;
        numTransactions = 0;
    }
};

// Function to simulate transaction processing
void simulateProcessing(User users[], int numUsers) {
    int currentTime = 0;
    int totalWaitingTime = 0;
    int totalTransactions = 0;

    for (int i = 0; i < numUsers; i++) {
        User user = users[i];
        int transactionStartTime = (currentTime < user.startTime) ? user.startTime : currentTime;

        for (int j = 0; j < user.numTransactions; j++) {
            cout << "User " << user.userID << " transaction starts at " << transactionStartTime << endl;

            int transactionEndTime = transactionStartTime + user.transactions[j];
            cout << "User " << user.userID << " transaction ends at " << transactionEndTime << endl;

            // Calculate waiting time for this transaction
            totalWaitingTime += (transactionStartTime - user.startTime);
            totalTransactions++;

            // Move the current time forward
            transactionStartTime = transactionEndTime;
        }

        currentTime = transactionStartTime;
    }

    // Calculate and print average waiting time
    double avgWaitingTime = (double) totalWaitingTime / totalTransactions;
    cout << "Average Waiting Time: " << avgWaitingTime << " seconds" << endl;
}

int main() {
    User users[MAX_USERS];
    int numUsers = 0;

    cout << "Enter user transactions (Format: userID startTime durations...)" << endl;
    cout << "Enter -1 to stop input." << endl;

    while (true) {
        int userID, startTime, duration;
        users[numUsers].numTransactions = 0;

        cin >> userID;
        if (userID == -1) break;  // Stop input if -1 is entered

        cin >> startTime;
        users[numUsers].userID = userID;
        users[numUsers].startTime = startTime;

        // Read transaction durations
        while (cin >> duration) {
            users[numUsers].transactions[users[numUsers].numTransactions++] = duration;
            if (cin.peek() == '\n') break; // Stop when the line ends
        }

        numUsers++;
    }

    // Process transactions
    simulateProcessing(users, numUsers);

    return 0;
}
